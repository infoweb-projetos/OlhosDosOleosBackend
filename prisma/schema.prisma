// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model TipoArtista {
  nome String @id
  usuarios Usuario[]
}

model Localizacao {
  id Int @id @default(autoincrement()) 
  usuarioid Int @unique
  cidadeid Int  
  estadoid Int    
  cidade Cidade @relation(fields: [cidadeid], references: [id])    
  estado Estado @relation(fields: [estadoid], references: [id])    
  usuario Usuario @relation(fields: [usuarioid], references: [id]) 
}

model Estado {
  id Int @id @default(autoincrement()) 
  nome String   
  cidades Cidade[] 
  localizacao Localizacao[] 
}

model Cidade {
  id Int @id @default(autoincrement())
  nome String
  estado Estado @relation(fields: [estadoid], references: [id]) 
  estadoid Int  
  localizacao Localizacao[] 
}

model Usuario {
  id Int @id @default(autoincrement())
  nome  String
  email String  @unique
  senha String  
  usuario String  @unique
  localizacao Localizacao?   
  localizacaoid  Int?
  insta String?
  youtube String?
  zap String?
  face String?
  tipo TipoArtista? @relation(fields: [tipoid], references: [nome]) 
  tipoid  String?     
  biografia String?
  imagem Bytes?
  imagemtipo String?
  banner Bytes?
  bannertipo String?
  cor1 String?
  cor2 String?
  cor3 String?
  cor4 String?
  posts Post[]
  pastas Pasta[]
  entrada DateTime @default(now())
  seguidores  UsuarioSeguidor[] @relation("seguidor") 
  seguidos    UsuarioSeguidor[] @relation("seguindo")  
  postcurtidos  Curtida[]
}

model Post{
  id Int @id @default(autoincrement())
  usuario Usuario @relation(fields: [usuarioid], references: [id]) 
  usuarioid Int 
  categoria Categoria @relation(fields: [categoriaid], references: [nome]) 
  categoriaid String     
  titulo String
  descricao String?
  imagem Bytes // Imagem da obra finalizada
  imagemtipo String
  processo Processo[] // as multiplas imagens que podem ser adicionadas pra mostrar o processo de criação da obra
  tags PostTag[]
  pastas PostPasta[]
  sensivel Boolean @default(false)
  rascunho Boolean @default(false)
  excluido Boolean @default(false)
  entrada DateTime @default(now())
  curtidas  Curtida[] 
}

model Processo{
  id Int @id @default(autoincrement())
  postid Int
  post Post @relation(fields: [postid], references: [id]) 
  imagem Bytes?
  imagemtipo String?
}

model Categoria {
  nome String @id
  posts Post[]
}

model Tag {
  nome String @id
  ferramenta Boolean @default(false)
  posts PostTag[]
}

model PostTag {
  postid Int 
  tagid String 
  tag Tag @relation(fields: [tagid], references: [nome], onDelete: Cascade)   
  post Post @relation(fields: [postid], references: [id], onDelete: Cascade)     
  @@id([postid, tagid])
}

model Pasta {
  id Int @id @default(autoincrement())
  nome String
  posts PostPasta[]
  usuario Usuario @relation(fields: [usuarioid], references: [id]) 
  usuarioid Int
}

model PostPasta {
  postid Int 
  pastaid Int 
  pasta Pasta @relation(fields: [pastaid], references: [id], onDelete: Cascade)   
  post Post @relation(fields: [postid], references: [id], onDelete: Cascade)     
  @@id([postid, pastaid])
}

model UsuarioSeguidor {
  usuarioid Int 
  seguidorid Int 
  usuario Usuario @relation("seguindo", fields: [usuarioid], references: [id], onDelete: Cascade)
  seguidor Usuario @relation("seguidor", fields: [seguidorid], references: [id], onDelete: Cascade)   
  @@id([usuarioid, seguidorid])
}

model Curtida {
  usuarioid Int 
  postid Int 
  post Post @relation(fields: [postid], references: [id], onDelete: Cascade)   
  usuario Usuario @relation(fields: [usuarioid], references: [id], onDelete: Cascade)
  @@id([usuarioid, postid])
}


